// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Onion.Infrastructure.Data;

#nullable disable

namespace Onion.Infrastructure.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20250208182722_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Onion.Domain.Models.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("OfferedPrice")
                        .HasColumnType("money");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Onion.Domain.Models.BlogPost", b =>
                {
                    b.Property<int>("BlogPostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPostID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<int>("ContentCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 853, DateTimeKind.Local).AddTicks(1543));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasDefaultValue("bosResim.jpg");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BlogPostID");

                    b.HasIndex("ContentCategoryID");

                    b.ToTable("BlogsPosts");
                });

            modelBuilder.Entity("Onion.Domain.Models.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 853, DateTimeKind.Local).AddTicks(9767));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Onion.Domain.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"));

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 854, DateTimeKind.Local).AddTicks(5043));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("CartItemID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Onion.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 855, DateTimeKind.Local).AddTicks(2105));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Bilgisayar ve aksesuarları",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 855, DateTimeKind.Local).AddTicks(5280),
                            RecordStatus = 1
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Telefon ve aksesuarları",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 855, DateTimeKind.Local).AddTicks(5288),
                            RecordStatus = 1
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Küçük ev aletleri.",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 855, DateTimeKind.Local).AddTicks(5290),
                            RecordStatus = 1
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Yazıcılar",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 855, DateTimeKind.Local).AddTicks(5291),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("Onion.Domain.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 855, DateTimeKind.Local).AddTicks(8493));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("RespondedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ComplaintID");

                    b.HasIndex("RespondedByUserID");

                    b.HasIndex("UserID");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Onion.Domain.Models.ContentCategory", b =>
                {
                    b.Property<int>("ContentCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentCategoryID"));

                    b.Property<string>("ContentCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 856, DateTimeKind.Local).AddTicks(4884));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ContentCategoryID");

                    b.ToTable("ContentCategories");

                    b.HasData(
                        new
                        {
                            ContentCategoryID = 1,
                            ContentCategoryName = "Teknoloji",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 856, DateTimeKind.Local).AddTicks(7713),
                            RecordStatus = 1
                        },
                        new
                        {
                            ContentCategoryID = 2,
                            ContentCategoryName = "Bilimsel Gelişmeler",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 856, DateTimeKind.Local).AddTicks(7721),
                            RecordStatus = 1
                        },
                        new
                        {
                            ContentCategoryID = 3,
                            ContentCategoryName = "Spor",
                            CreatedDate = new DateTime(2025, 2, 8, 21, 27, 20, 856, DateTimeKind.Local).AddTicks(7723),
                            RecordStatus = 1
                        });
                });

            modelBuilder.Entity("Onion.Domain.Models.FAQ", b =>
                {
                    b.Property<int>("FAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FAQID"));

                    b.Property<string>("Answer")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<int?>("AnsweredByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AnsweredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 857, DateTimeKind.Local).AddTicks(755));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FAQID");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Onion.Domain.Models.News", b =>
                {
                    b.Property<int>("NewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<int>("ContentCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 857, DateTimeKind.Local).AddTicks(7465));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasDefaultValue("bosResim.jpg");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("NewsID");

                    b.HasIndex("ContentCategoryID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Onion.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CartID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Onion.Domain.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecordStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReturnStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Onion.Domain.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 859, DateTimeKind.Local).AddTicks(1933));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasDefaultValue("bosResim.jpg");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Onion.Domain.Models.Return", b =>
                {
                    b.Property<int>("ReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 859, DateTimeKind.Local).AddTicks(9246));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ReturnStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReturnID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("Onion.Domain.Models.ReturnItem", b =>
                {
                    b.Property<int>("ReturnItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnItemID"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2025, 2, 8, 21, 27, 20, 861, DateTimeKind.Local).AddTicks(9472));

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("ReturnID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("ReturnItemID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ReturnID");

                    b.ToTable("ReturnItems");
                });

            modelBuilder.Entity("Onion.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "3d25f048-2b56-410d-8fd6-d74f3aa59caf",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "3d740923-f12a-4ad1-b435-be3119275fdf",
                            Name = "ContentManager",
                            NormalizedName = "CONTENTMANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "3abddb25-3243-4d6d-ac1f-e2f83f1fbdcc",
                            Name = "CustomerService",
                            NormalizedName = "CUSTOMERSERVICE"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "09ae7520-cd47-4d46-9640-f74ccaacb668",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Onion.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de34fa6f-6556-4379-8975-c335f52d23e4",
                            Email = "superadmin@deneme.com",
                            EmailConfirmed = false,
                            FirstName = "Super",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@DENEME.COM",
                            NormalizedUserName = "SPRADMN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDyhY6ESps/hiKQrUse2z/lxMDUjlJskvaxKRAp9rsiI08kFkLFnfdOlQgfU/pbgQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "773bb8a7-c913-494b-b4e8-c09cfea51d0f",
                            TwoFactorEnabled = false,
                            UserName = "sprAdmn"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3148fbf-cf12-414d-a3ec-3998c99c0383",
                            Email = "contentmanager@deneme.com",
                            EmailConfirmed = false,
                            FirstName = "Content",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "CONTENTMANAGER@DENEME.COM",
                            NormalizedUserName = "CNTMGR",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgFf4se0kjiu0J0WNRj/2YcmXK08sG7ZE2YMUEgzgZyQmNY2LjN8TCDYhjakWSHgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aca6392e-96aa-4d87-a55c-96df97dadc2f",
                            TwoFactorEnabled = false,
                            UserName = "cntMgr"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "480cd81a-829f-46f2-90d9-0578708cbf71",
                            Email = "customerservice@deneme.com",
                            EmailConfirmed = false,
                            FirstName = "Customer",
                            LastName = "Service",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE@DENEME.COM",
                            NormalizedUserName = "CSTSRV",
                            PasswordHash = "AQAAAAIAAYagAAAAEM+Ptdzarr08Cfrq/ckjsn4fRk9kxE5H1aDuIswYSKoNfYZnaf1r8zDuYx/clJ0QTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdad7bdf-bce9-41b6-bc2e-20190d29a7b3",
                            TwoFactorEnabled = false,
                            UserName = "cstSrv"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Onion.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Onion.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Onion.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Onion.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onion.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Onion.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Onion.Domain.Models.Bid", b =>
                {
                    b.HasOne("Onion.Domain.Models.Product", "Product")
                        .WithMany("Bids")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Onion.Domain.Models.BlogPost", b =>
                {
                    b.HasOne("Onion.Domain.Models.ContentCategory", "ContentCategory")
                        .WithMany("BlogPosts")
                        .HasForeignKey("ContentCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentCategory");
                });

            modelBuilder.Entity("Onion.Domain.Models.Cart", b =>
                {
                    b.HasOne("Onion.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Onion.Domain.Models.CartItem", b =>
                {
                    b.HasOne("Onion.Domain.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onion.Domain.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Onion.Domain.Models.Complaint", b =>
                {
                    b.HasOne("Onion.Domain.Models.User", "RespondedByUser")
                        .WithMany()
                        .HasForeignKey("RespondedByUserID");

                    b.HasOne("Onion.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RespondedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Onion.Domain.Models.News", b =>
                {
                    b.HasOne("Onion.Domain.Models.ContentCategory", "ContentCategory")
                        .WithMany("NewsArticles")
                        .HasForeignKey("ContentCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentCategory");
                });

            modelBuilder.Entity("Onion.Domain.Models.Order", b =>
                {
                    b.HasOne("Onion.Domain.Models.Cart", "Cart")
                        .WithMany("Orders")
                        .HasForeignKey("CartID");

                    b.HasOne("Onion.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Onion.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("Onion.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onion.Domain.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Onion.Domain.Models.Product", b =>
                {
                    b.HasOne("Onion.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Onion.Domain.Models.Return", b =>
                {
                    b.HasOne("Onion.Domain.Models.Order", "Order")
                        .WithMany("Returns")
                        .HasForeignKey("OrderID");

                    b.HasOne("Onion.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Onion.Domain.Models.ReturnItem", b =>
                {
                    b.HasOne("Onion.Domain.Models.Product", "Product")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onion.Domain.Models.Return", "Return")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Onion.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Onion.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Onion.Domain.Models.ContentCategory", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("NewsArticles");
                });

            modelBuilder.Entity("Onion.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("Onion.Domain.Models.Product", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Onion.Domain.Models.Return", b =>
                {
                    b.Navigation("ReturnItems");
                });
#pragma warning restore 612, 618
        }
    }
}
